{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "4c874d98_0c4e0508",
        "filename": "subcmds/sync.py",
        "patchSetId": 1
      },
      "lineNbr": 1280,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2022-10-26T16:48:21Z",
      "side": 1,
      "message": "thoughts on adding a new test in https://gerrit.googlesource.com/git-repo/+/refs/heads/main/tests/test_subcmds_sync.py that would have caught this?",
      "range": {
        "startLine": 1280,
        "startChar": 0,
        "endLine": 1280,
        "endChar": 32
      },
      "revId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2deeff71_2b86d937",
        "filename": "subcmds/sync.py",
        "patchSetId": 1
      },
      "lineNbr": 1280,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2022-10-26T17:00:46Z",
      "side": 1,
      "message": "pylint would have caught this, but it\u0027s also currently very noisy.  I\u0027m working on another CL that at least reduces the noise in sync.py without introducing lots of changes.\n\nWe should create unit tests for all of the code, which is sorely lacking in the current state.  I think that warrants its own comprehensive effort.",
      "parentUuid": "4c874d98_0c4e0508",
      "range": {
        "startLine": 1280,
        "startChar": 0,
        "endLine": 1280,
        "endChar": 32
      },
      "revId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6ebd7240_803e4efc",
        "filename": "subcmds/sync.py",
        "patchSetId": 1
      },
      "lineNbr": 1280,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2022-10-26T17:05:15Z",
      "side": 1,
      "message": "Would it be possible to add a basic test that would have caught this? I for sure do not want to hold this change on adding all the tests, but a small test that would have caught this feels ok?",
      "parentUuid": "2deeff71_2b86d937",
      "range": {
        "startLine": 1280,
        "startChar": 0,
        "endLine": 1280,
        "endChar": 32
      },
      "revId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "fbd75a02_6846954b",
        "filename": "subcmds/sync.py",
        "patchSetId": 1
      },
      "lineNbr": 1280,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2022-10-26T18:17:07Z",
      "side": 1,
      "message": "The issue is buried in a function that should really be refactored into something that can be unit tested.  I don\u0027t see any reasonable way to add a unit test for this specific issue at this time.",
      "parentUuid": "6ebd7240_803e4efc",
      "range": {
        "startLine": 1280,
        "startChar": 0,
        "endLine": 1280,
        "endChar": 32
      },
      "revId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c0a1529a_8653c4b7",
        "filename": "subcmds/sync.py",
        "patchSetId": 1
      },
      "lineNbr": 1280,
      "author": {
        "id": 1023872
      },
      "writtenOn": "2022-10-26T18:18:00Z",
      "side": 1,
      "message": "ack!!",
      "parentUuid": "fbd75a02_6846954b",
      "range": {
        "startLine": 1280,
        "startChar": 0,
        "endLine": 1280,
        "endChar": 32
      },
      "revId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ],
  "submitRequirementResults": [
    {
      "submitRequirement": {
        "name": "Code-Review",
        "description": {
          "value": "Submit requirement for the \u0027Code-Review\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Code-Review\u003dMAX AND -label:Code-Review\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Code-Review=MAX AND -label:Code-Review=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Code-Review=MAX"],"failingAtoms":["label:Code-Review=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Do-Not-Submit",
        "description": {
          "value": "Changes that have DO NOT SUBMIT in their commit message are not submittable."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:false"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["message:\"^.*(D|d)(O|o) (N|n)(O|o)(T|t) (S|s)(U|u)(B|b)(M|m)(I|i)(T|t).*\""]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:false"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "No-Unresolved-Comments",
        "description": {
          "value": "Changes that have unresolved comments are not submittable. Unless overriden by adding the hashtag allow-unresolved-comments."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "has:unresolved"
          }
        },
        "submittabilityExpression": {
          "expressionString": "-has:unresolved"
        },
        "overrideExpression": {
          "value": {
            "expressionString": "hashtag:allow-unresolved-comments"
          }
        },
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"has:unresolved"},"status":"FAIL","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["has:unresolved"]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"-has:unresolved"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "overrideExpressionResult": {
        "value": {"expression":{"expressionString":"hashtag:allow-unresolved-comments"},"status":"NOT_EVALUATED","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":[]}
      },
      "patchSetCommitId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    },
    {
      "submitRequirement": {
        "name": "Review-Enforcement",
        "description": {
          "value": "Two Google employees must approve the change. Uploading the change or voting positively on Code-Review count as approval."
        },
        "applicabilityExpression": {
          "value": {
            "expressionString": "is:review-enforced_gerrit"
          }
        },
        "submittabilityExpression": {
          "expressionString": "is:review-enforcement-satisfied_gerrit"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": false
      },
      "applicabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["is:review-enforced_gerrit"],"failingAtoms":[]}
      },
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"is:review-enforced_gerrit"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":[],"failingAtoms":["is:review-enforcement-satisfied_gerrit"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {
        "value": true
      }
    },
    {
      "submitRequirement": {
        "name": "Verified",
        "description": {
          "value": "Submit requirement for the \u0027Verified\u0027 label"
        },
        "applicabilityExpression": {},
        "submittabilityExpression": {
          "expressionString": "label:Verified\u003dMAX AND -label:Verified\u003dMIN"
        },
        "overrideExpression": {},
        "allowOverrideInChildProjects": true
      },
      "applicabilityExpressionResult": {},
      "submittabilityExpressionResult": {
        "value": {"expression":{"expressionString":"label:Verified=MAX AND -label:Verified=MIN"},"status":"PASS","errorMessage":{"value":null},"passingAtoms":["label:Verified=MAX"],"failingAtoms":["label:Verified=MIN"]}
      },
      "overrideExpressionResult": {},
      "patchSetCommitId": "f7dd8ad6e457306499f19e1e890822965e703a7a",
      "legacy": {
        "value": false
      },
      "forced": {},
      "hidden": {}
    }
  ]
}