{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "129a8a65_a7cc4658",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 55,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-09-30T00:00:26Z",
      "side": 1,
      "message": "git writes diagnostic logs such as upload progress to stderr by default. Setting this to one just ignores the actual error. Would this break anything?",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0e61e572_a1a0702e",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-09-30T00:00:26Z",
      "side": 1,
      "message": "afaiu, io.TextIOWrapper buffers until `io.DEFAULT_BUFFER_SIZE`, which 8192, before returning. I guess that shouldn\u0027t be a problem.",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0ba0481b_e96ff74e",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-09-30T00:14:01Z",
      "side": 1,
      "message": "@vapier@google.com Do you have any concerns with capturing and writing back the logs this way? From manual testing, the only downside I see to this change is that it doesn\u0027t process special chars so the progress prints additional logs[1][2]. I\u0027m not sure if that\u0027s avoidable here.\n\n[1] http://screen/6wbgFAQracteiVY\n[2] http://screen/9fqACayT2ZVVufX",
      "parentUuid": "0e61e572_a1a0702e",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2426fc37_1c83a54d",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-04T04:26:55Z",
      "side": 1,
      "message": "this assumes the output is line delimited which doesn\u0027t work for progress bar type things which is common in slow download/upload operations.  this should be reading chunks at a time and passing them along.\n\nyour screenshots suggest there\u0027s quite a regression in this space -- the output looks significantly different doesn\u0027t it ?\n\nsounds like we want to resurrect:\nhttps://gerrit-review.googlesource.com/c/git-repo/+/297422",
      "parentUuid": "0ba0481b_e96ff74e",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c531f0bc_7a4eae88",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-10-04T23:14:29Z",
      "side": 1,
      "message": "\u003e sounds like we want to resurrect: https://gerrit-review.googlesource.com/c/git-repo/+/297422\n\nI didn\u0027t know repo used to have this! Thanks for this CL.\n\n\u003e this assumes the output is line delimited\n\nI didn\u0027t realize `io.TextIOWrapper` by default even without any args so I guess that explains the regression. I took a page out of go/grev/297422 and updated the code.\n\nI\u0027m not adding all the non-blocking I/O logic since we only care about tee-ing stderr in this case.\n\nUpdated screenshots:\nCurrent Impl: http://screen/AMfqwNKrKJbsD5T\nNew Impl: http://screen/3MW9Lu8qKpNLosZ",
      "parentUuid": "2426fc37_1c83a54d",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f85a0c8a_59f160d5",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-05T04:28:41Z",
      "side": 1,
      "message": "the output is still diff in not a good way -- afaict, users don\u0027t receive feedback on slow pushes which def comes up with Chromium \u0026 Android users\n\nmaybe you want to add `--progress` to the upload step when running `git push` ?",
      "parentUuid": "c531f0bc_7a4eae88",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db4efb55_633ab3b8",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-10-05T04:48:45Z",
      "side": 1,
      "message": "\u003e the output is still diff in not a good way\n\nThe previous implementation was reading the stream in `4096` byte chunks too so I thought this was acceptable. That impl has similar logs[1].\n\n\u003e maybe you want to add `--progress` to the upload step when running `git push`?\n\nDone[2]. Adding `--progress` seems to give similar logs to before capturing. \n\n[1] http://screen/3eEvgjSD8ANZKK3\n[2] http://screen/9iqmDjYaafVbrwg",
      "parentUuid": "f85a0c8a_59f160d5",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e3ec556e_1a900f90",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-05T04:57:35Z",
      "side": 1,
      "message": "the issue isn\u0027t the chunk size.  afaict, the progress bars weren\u0027t shown at all.\n\nthe 4k in the previous code didn\u0027t mean it filled 4k before doing anything.  pretty sure it used select() to wait for any data, and then it read what was there until it was gone, then went back to waiting via select().\n\ni don\u0027t know if Python offers a way to do short blocking reads :/.  what if you did `.read(1)`, then checked to see how much data was queued (somehow?), and then read the rest, then went back to `.read(1)`.",
      "parentUuid": "db4efb55_633ab3b8",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36578467_672f0183",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-10-05T05:49:16Z",
      "side": 1,
      "message": "\u003e i don\u0027t know if Python offers a way to do short blocking reads\n\nI see what you mean. From the documentation, `read1` should achieve this[1]. Progress bar: http://screen/9Zh3CWad5VG9XXo\n\n[1] https://docs.python.org/3/library/io.html#io.BufferedIOBase.read1",
      "parentUuid": "e3ec556e_1a900f90",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8cbe0e18_170f9d55",
        "filename": "git_command.py",
        "patchSetId": 18
      },
      "lineNbr": 476,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-10-06T00:35:44Z",
      "side": 1,
      "message": "Closing this since there is not regression in the output after switching to `read1`.",
      "parentUuid": "36578467_672f0183",
      "revId": "e98f48af5491740084336a76e7c8f34013c0a0c9",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}