{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "fa82b96c_9b077f1e",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-02-26T08:30:04Z",
      "side": 1,
      "message": "git/Gerrit doesn\u0027t render this diff well, but i reindented the output code to move it from the for loop above into this nested func.\n\nprobably moving from using properties of the |p| object to func arguments also made it hard to minimize the changes.",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "66c59e67_e06c1b78",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1071989
      },
      "writtenOn": "2021-02-26T22:34:51Z",
      "side": 1,
      "message": "Rather than a closure could this just be a free function that takes `out` as an argument? Would help with the complexity of this function body.",
      "parentUuid": "fa82b96c_9b077f1e",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da473ed3_2ee69296",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-02-27T18:31:44Z",
      "side": 1,
      "message": "as it\u0027s written, the children do all their work independently, and then return their output for processing.  if |out| is used directly by the children, we\u0027d need locks over the entire body to make sure only one child is writing to stdout at a time, otherwise we\u0027d have mingled/corrupted output.  in my simple tests, doing the processing in the children saved very little time, and that was without locks.\n\nin terms of code complexity, i\u0027m not seeing it being that much simpler if the body of _ProcessResults was (mostly) inside of _ExecuteOne.  we\u0027d still have largely the same amount of code, but we\u0027d also now have to instantiate \u0026 pass around a lock.\n\nwrt passing locks, it\u0027s kind of a pain.  multiprocessing doesn\u0027t allow you to pass it as an argument to the func from imap/etc... methods, you have to pass it at pool instantiation time, and even then the setup has to go through global scope rather than the object itself.  which was fun to debug as the child would never have self.lock setup ...\n\nalso, if the children do the processing \u0026 output, we\u0027d lose stable ordering that we have today.\n\n   def _ExecuteOne(self, cmd_argv, project):\n     \"\"\"Process one project.\"\"\"\n     try:\n       p \u003d GitCommand(project,\n                      cmd_argv,\n                      bare\u003dFalse,\n                      capture_stdout\u003dTrue,\n                      capture_stderr\u003dTrue)\n     except GitError as e:\n       return (project, -1, None, str(e))\n +\n +   with self.lock.get_lock():\n +     ...do all the same out processing here...\n +\n     return (project, p.Wait(), p.stdout, p.stderr)\n ...\n + def _PassState(self, lock):\n +   Grep.lock \u003d lock\n ...\n -     with multiprocessing.Pool(opt.jobs) as pool:\n +     lock \u003d multiprocessing.Lock()\n +     with multiprocessing.Pool(opt.jobs, self._PassState, [active_jobs]) as pool:\n ...",
      "parentUuid": "66c59e67_e06c1b78",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4d85c427_4f68e570",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1071989
      },
      "writtenOn": "2021-03-31T15:33:05Z",
      "side": 1,
      "message": "This inner function isn\u0027t passed down to child workers, is it? I was referring to just moving the text formatting to a helper function.",
      "parentUuid": "da473ed3_2ee69296",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "918f8ee6_6067f7a3",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-03-31T16:41:51Z",
      "side": 1,
      "message": "_ProcessResults runs in the main thread.  the text formatting all operates on the |out| object which is also created in the main thread and outputs to the terminal/log.  it\u0027s a bit difficult to decouple that from the individual grep output since we interleave headers/formatting with line-level results.  that\u0027s why i say the children would need to grab a common lock before they could output results.\n\nwe could have each child instantiate a dedicated |out| object and serialize/return that to the main thread for it to join+output, but my tests don\u0027t show doing all of this text processing in the main thread as generally being slow, or hot path at all.  so i think the current code is easier to maintain and the trade-offs not worth the \u003c100ms out of O(seconds) that running `git grep` in every repo incurs.",
      "parentUuid": "4d85c427_4f68e570",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9f24737a_66d0de08",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-03-31T16:45:38Z",
      "side": 1,
      "message": "if you just want me to move _ProcessResults to a class method (can prob do @staticmethod) rather than a nested function, that should be easy to do",
      "parentUuid": "918f8ee6_6067f7a3",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6aac2476_11f4e914",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 203,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-04-01T01:40:37Z",
      "side": 1,
      "message": "per our chat, i\u0027ve moved this nested func to a static method, and passed in the vars that were used from the enclosing context as func arguments",
      "parentUuid": "9f24737a_66d0de08",
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "04ef526b_fbd7ae01",
        "filename": "subcmds/grep.py",
        "patchSetId": 1
      },
      "lineNbr": 220,
      "author": {
        "id": 1071989
      },
      "writtenOn": "2021-02-26T22:34:51Z",
      "side": 1,
      "message": "is it too much to ask that there be a unique retcode for this case? :(",
      "range": {
        "startLine": 220,
        "startChar": 28,
        "endLine": 220,
        "endChar": 66
      },
      "revId": "64345501fd6af8e351b34f4335f41b4a76f41c84",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}