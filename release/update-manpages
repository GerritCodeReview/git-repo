#!/usr/bin/env python3
# Copyright (C) 2021 The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""Helper tool for generating manual page for all repo commands.

This is intended to be run before every official Repo release.
"""

import multiprocessing
import os
import pathlib
import re
import shutil
import subprocess
import sys
import tempfile

topdir = pathlib.Path(__file__).resolve().parent.parent
mandir = topdir.joinpath('man')

def worker(cmd):
  subprocess.run(cmd)

def main():
  if not shutil.which('help2man'):
    sys.exit('Please install help2man to continue.')

  # load repo local modules
  sys.path.insert(0, str(topdir))
  import subcmds
  from git_command import RepoSourceVersion

  version = RepoSourceVersion()
  with tempfile.TemporaryDirectory() as tempdir:
    subprocess.run(f'git archive --prefix=.repo/repo/ HEAD|tar xf - -C{tempdir}', shell=True)
    os.chdir(tempdir)

    # "repo branch" is an alias for "repo branches"
    del subcmds.all_commands['branch']
    cmdlist = [['help2man', '-N', '-n', f'repo {cmd} - manual page for repo {cmd}',
      '-S', f'repo {cmd}', '-m', 'Repo Manual', f'--version-string={version}',
      '-o', mandir.joinpath(f'repo-{cmd}.1'), topdir.joinpath('repo'),
      '-h', f'help {cmd}'] for cmd in subcmds.all_commands]
    cmdlist.append(['help2man', '-N', '-n', 'repository management tool built on top of git',
      '-S', 'repo', '-m', 'Repo Manual', f'--version-string={version}',
      '-o', mandir.joinpath('repo.1'), topdir.joinpath('repo'),
      '-h', 'help --all'])

    # run all cmd in parallel, and wait them until finish
    with multiprocessing.Pool() as pool:
      pool.map(worker, cmdlist)

  os.chdir(mandir)
  pathlib.Path('repo-branch.1').write_text('.so man1/repo-branches.1')
  for path in mandir.glob('*.1'):
    data = path.read_text()
    data = re.sub(r'^\.IP', '.SS', data, flags=re.M)
    data = re.sub(r"^\.PP\nDescription", '.SS More Info', data, flags=re.M)
    path.write_text(data)

if __name__ == '__main__':
  sys.exit(main())
