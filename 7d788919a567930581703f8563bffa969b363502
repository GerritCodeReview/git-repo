{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "bb265e2f_d5c13b26",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "i\u0027ve never used git-lfs, so i can\u0027t speak to it as a user, but should it be supported in repo itself in some form ?  can it be done cheaply ?",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "201f54a4_1cde3702",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "It is deliberately disabled in commits 76a4a9df86e9f969caf1fdd9e6d2f3ec5f18e94f and c5b0e23490478b4e5d22335d7015f40a8c187518, such that git lfs pull need to be run for each git repository after sync.",
      "parentUuid": "bb265e2f_d5c13b26",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03d6e996_5095deb0",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-26T08:26:25Z",
      "side": 1,
      "message": "i think i\u0027ve seen users/projects not like that behavior, even if it\u0027s the current default.  could we turn it into a `repo sync` option (defaulting to off to match current behavior) and extend the manifest format to control the default ?  the manifest already supports defaults for many sync options like -j/-c/-s/--tags.\n\nwdyt ?",
      "parentUuid": "201f54a4_1cde3702",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "30a33e54_3471626d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2021-01-22T17:53:40Z",
      "side": 1,
      "message": "It is not about preference with Git-lfs, it is about that it does not work if you clone a tree when cloning via a mirror via the --reference option. That does not work. I need to look at the other options to solve that, but that would be outside the scope of this patch.",
      "parentUuid": "03d6e996_5095deb0",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "298c7cd2_66ab3fe9",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 10,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-02-23T04:52:30Z",
      "side": 1,
      "message": "sure, i\u0027m not asking for this patch to include git-lfs.  when you say git-lfs support is the reason for implementing a post sync hook, the question is whether it\u0027d be better if repo provided that itself directly rather than requiring projects constantly reimplement it themselves, and thus whether we\u0027d need this at all.\n\ni\u0027ve never used git-lfs myself, so i wouldn\u0027t be able to put that together.  i\u0027m not sure why --reference would break things, but i\u0027d understand that things might not cache the objects as well as desired.",
      "parentUuid": "30a33e54_3471626d",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "50872518_491a03ce",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 13,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "this sounds dicey :P",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "68e65b61_2da54d32",
        "filename": "/COMMIT_MSG",
        "patchSetId": 13
      },
      "lineNbr": 13,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "It depends: if the recipe of what to download is specified in the source tree itself, then it is predictable.",
      "parentUuid": "50872518_491a03ce",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3da7c0a5_0bf93b25",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "let\u0027s use commas here to match project.groups\n\nhttps://gerrit-review.googlesource.com/c/git-repo/+/290743",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0c893888_348b294f",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 38,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "3da7c0a5_0bf93b25",
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8b5b93e2_7407e015",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 45,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "the docs have been using 2 spaces after the .",
      "range": {
        "startLine": 45,
        "startChar": 22,
        "endLine": 45,
        "endChar": 23
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4e00f47b_cbe0135d",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 45,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "8b5b93e2_7407e015",
      "range": {
        "startLine": 45,
        "startChar": 22,
        "endLine": 45,
        "endChar": 23
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "417b0804_b054e398",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "that-\u003ethe now that there\u0027s more than one",
      "range": {
        "startLine": 46,
        "startChar": 66,
        "endLine": 46,
        "endChar": 70
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2c3e8faf_3157fc17",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 46,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "417b0804_b054e398",
      "range": {
        "startLine": 46,
        "startChar": 66,
        "endLine": 46,
        "endChar": 70
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f982b3c4_f2ad34ca",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 142,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "at first glance it seems like we should run at this point.  but the big gotcha is that the project won\u0027t exist yet in the checkout.  maybe we should add that as a parenthetical aside for future readers ?\n\n(as the network only updates the internal cache, and does not create or update the local project checkout)",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 142,
        "endChar": 34
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3df88442_b4e7fe5f",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 142,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "f982b3c4_f2ad34ca",
      "range": {
        "startLine": 142,
        "startChar": 0,
        "endLine": 142,
        "endChar": 34
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "74c20cdf_6b58e688",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-04T10:55:03Z",
      "side": 1,
      "message": "it seems to me that we should always run when not in network-only mode.  we should pass in the projects that succeeded \u0026 the projects that failed.\n\nthe current API with the sep lists gets awkward, so maybe a list of dicts would be better.\n\n def main(passed\u003d(), failed\u003d(), **kwargs):\n\n passed \u003d [\n   {\n     \u0027name\u0027: \u0027the/project/name/attribute\u0027,\n     \u0027workdir\u0027: \u0027/the/local/checkout/path\u0027,\n   },\n ]\n\nsplitting passed \u0026 failed out seems like it\u0027d cater a bit more to people who only care about e.g. passed rather than smooshing them together with a \u0027pass\u0027: True/False key.\n\nwdyt ?",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 12
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f865f223_f37fbce5",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2020-12-15T18:35:45Z",
      "side": 1,
      "message": "I like this kind of interface, I thought it was awkward too on the pre-upload hook.\nOn the other hand, I made the interface exactly the same as the pre-upload hook such that all hooks follow the same interface. I wonder if we can make it the same, maybe even by still supporting the old interface on the pre-upload hook for legacy reasons. Symmetry would be nice between possible hooks. Not sure if it would be possible for all types of hooks that can be thought of in the future, but at least for the ones known so far.",
      "parentUuid": "74c20cdf_6b58e688",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 12
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e33c0058_983a3116",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2020-12-26T08:26:25Z",
      "side": 1,
      "message": "i appreciate symmetry if it works well for them all, but i don\u0027t think we should bend things in an awkward direction just to attain it.  i\u0027m fine letting them diverge in whatever shape makes sense.\n\nif we did want to harmonize/formalize things, then i\u0027d be inclined to create real classes/objects (namedtuple) to pass in rather than doing a dict grab-bag.  that\u0027d be less error prone \u0026 easier to lint.  prob should have it mirror the project.py:Project naming conventions.\n\nwrt backwards compatibility, perhaps we could get more (but not too much more) clever.  atm, we\u0027ve been forcing hooks to accept **kwargs as a future-proofing thing.  what if the func signature itself was used to declare its expected version ?  and then we used the inspect module to see what version of the interface it accepted ?\nhttps://docs.python.org/3/library/inspect.html#inspect.getfullargspec\n\nfor example, hook authors would do (happy to bikeshed the name):\n\n def main(..., hook_version\u003d1, ...):\n\nthen we\u0027d extend the RepoHook class:\n\n* __init__ would take a list of supported_versions which defaults to [0]\n* add a GetVersion() that would inspect the func to pull out the version from it\n* if hook_version wasn\u0027t defined, we\u0027d assume the default of 0\n* if GetVersion() doesn\u0027t match a value in supported_versions then we\u0027d throw an error\n\nthen the caller would be responsible for handling the diff versions, e.g. subcmds/upload.py would check for version 0 or 1 or whatever and construct/call it accordingly.\n\nthe current hooks code complicates this interface a bit due to support for out-of-process hook execution with _ExecuteHookViaReexec.  that was added to support hooks running a different version of python than repo itself so we could upgrade repo to python3 will supporting python2 hooks, and upgrade hooks to python3 with repo running under python2.  i\u0027d be fine deprecating this mode now that we\u0027re forcing python3 in repo itself, and only supporting new hooks \u0026 hook versions in python3-only.  basically we\u0027d add code to _ExecuteHookViaReexec to only support version 0 of the pre-upload interface, and to abort on any other combo.",
      "parentUuid": "f865f223_f37fbce5",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 12
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ca3dd0c_12cd6ed2",
        "filename": "docs/repo-hooks.md",
        "patchSetId": 13
      },
      "lineNbr": 143,
      "author": {
        "id": 1010522
      },
      "writtenOn": "2021-01-22T17:53:40Z",
      "side": 1,
      "message": "I understand what you are saying here, I need to think about it a bit more.",
      "parentUuid": "e33c0058_983a3116",
      "range": {
        "startLine": 143,
        "startChar": 0,
        "endLine": 143,
        "endChar": 12
      },
      "revId": "7d788919a567930581703f8563bffa969b363502",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}