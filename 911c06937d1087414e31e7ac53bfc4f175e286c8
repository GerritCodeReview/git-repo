{
  "comments": [
    {
      "key": {
        "uuid": "AAAA83///2I\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "These 4 things should probably be 4 separate commits, to make it easier to review.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+Yg\u003d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 5
      },
      "lineNbr": 13,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-30T19:38:56Z",
      "side": 1,
      "message": "Partially done. Will move the pager change to another change also.",
      "parentUuid": "AAAA83///2I\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+jI\u003d",
        "filename": "command.py",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1005104
      },
      "writtenOn": "2010-11-27T17:47:03Z",
      "side": 1,
      "message": "Here to support both linux and windows you could do something like :\n\noldpath \u003d None\nwhile path \\\n  and path !\u003d oldpath \\     # Support both linux and windows.\n  and path !\u003d self.manifest.topdir:\n  try:\n    project \u003d by_path[path]\n    break\n  except KeyError:\n    oldpath \u003d path\n    path \u003d os.path.dirname(path)\n\nthis would remove the windowism. I believe all versions of dirname will return an unchanged path when you are already at the root.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+aI\u003d",
        "filename": "command.py",
        "patchSetId": 5
      },
      "lineNbr": 105,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-29T19:18:54Z",
      "side": 1,
      "message": "Done\n\nhttps://review.source.android.com/#change,19220",
      "parentUuid": "AAAA9n//+jI\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///14\u003d",
        "filename": "command.py",
        "patchSetId": 5
      },
      "lineNbr": 106,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Same comment as in repo, use r\u0027...\u0027 style string.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+iw\u003d",
        "filename": "git_command.py",
        "patchSetId": 5
      },
      "lineNbr": 182,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2010-11-27T21:52:08Z",
      "side": 1,
      "message": "for var in env:\nNo need to create a temporary list.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+is\u003d",
        "filename": "git_command.py",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2010-11-27T21:52:08Z",
      "side": 1,
      "message": "It seems fragile. It happens that the environment values are unicode?",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+ak\u003d",
        "filename": "git_command.py",
        "patchSetId": 5
      },
      "lineNbr": 183,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-29T19:18:54Z",
      "side": 1,
      "message": "I had unicode environment variables, so this was failing.\n\nMoved to https://review.source.android.com/#change,19219",
      "parentUuid": "AAAA9n//+is\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1Q\u003d",
        "filename": "manifest_submodule.py",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Why did this code move?  Its hard enough to review a lot of potentially breaking changes, its harder still when there are unnecessary code changes.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///yE\u003d",
        "filename": "manifest_submodule.py",
        "patchSetId": 5
      },
      "lineNbr": 147,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "It will try to obtain the information from the old path which isn\u0027t compatible with git a link file.",
      "parentUuid": "AAAA83///1Q\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+Yk\u003d",
        "filename": "manifest_submodule.py",
        "patchSetId": 5
      },
      "lineNbr": 230,
      "author": {
        "id": 1005104
      },
      "writtenOn": "2010-12-07T03:13:16Z",
      "side": 1,
      "message": "spacing is wrong. it needs 2 more spaces.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1I\u003d",
        "filename": "manifest_xml.py",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "When the manifest repository changes, I don\u0027t think we call back through here to \"update\" manifest.xml.  Which means the client will continue to sync with the older copy of the manifest content, and won\u0027t pick up changes like an added or removed project.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///yA\u003d",
        "filename": "manifest_xml.py",
        "patchSetId": 5
      },
      "lineNbr": 96,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "Correct. See my comment on patch set 4. I just wasn\u0027t sure how you wanted to address it.",
      "parentUuid": "AAAA83///1I\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///10\u003d",
        "filename": "pager.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Why are we changing the default PAGER from \u0027less\u0027 to nothing?  This breaks a lot of existing users who are on UNIX and don\u0027t set the above variables.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///x8\u003d",
        "filename": "pager.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "Having a default PAGER as something OS specific seemed inappropriate. It seems that users should be expected to set the pager as they see fit. Perhaps backwards compatible behavior is more important, though.\n\nI don\u0027t Windows has a built in pager, so everyone would need to set this to empty.",
      "parentUuid": "AAAA83///10\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+jE\u003d",
        "filename": "pager.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1005104
      },
      "writtenOn": "2010-11-27T17:47:03Z",
      "side": 1,
      "message": "Windows has \"more\" (c:\\windows\\system32\\more.com)",
      "parentUuid": "AAAA9n///x8\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+io\u003d",
        "filename": "pager.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1002560
      },
      "writtenOn": "2010-11-27T21:52:08Z",
      "side": 1,
      "message": "I agree, run something like:\n\nless \u003d which(\u0027less\u0027)\nif less:\n  return less\nif sys.platform \u003d\u003d \u0027win32\u0027:\n  return \u0027more\u0027\nreturn \u0027\u0027\n\nBut even the above code could be overkill.",
      "parentUuid": "AAAA9n//+jE\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+K8\u003d",
        "filename": "pager.py",
        "patchSetId": 5
      },
      "lineNbr": 70,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-30T19:38:56Z",
      "side": 1,
      "message": "Does Py have a built in which() somewhere? I implemented it to try what you suggested but didn\u0027t want to be redundant.\n\nI hadn\u0027t realized Windows had \"more,\" so that\u0027s great but after I implemented that I noticed a bigger problem: Windows Python doesn\u0027t have os.fork() [ http://bugs.python.org/issue468153 ]\n\nWithout fork() it seems like the options are to either just output to the screen (not terrible) or queue up the output and then feed it all to the pager after. Thoughts?",
      "parentUuid": "AAAA9n//+io\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1w\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Rename works on UNIX.  It should also work on Windows... if it doesn\u0027t then you should try deleting the target (path) and renaming again.\n\nThe Git locking protocol was designed this way to try and avoid having a partially written file appear at the target.  We shouldn\u0027t break that behavior.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///x4\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 42,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "It doesn\u0027t work on Windows (hence changing it). I can remove the file first, though.",
      "parentUuid": "AAAA83///1w\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1s\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 843,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "This beaks any existing repo client, unless we first automatically upgrade their \".git as a forest of symlinks\" into a \".git file pointing to another directory\".\n\nUnfortunately that means you may need to handle both cases in the repo code, because there are many existing \".git as a forest of symlinks\" clients already out there in active use by developers.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///x0\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 843,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "Ah ya, good point. Do you feel we need to support both or automatically \"upgrade\" them to the gitlink format?",
      "parentUuid": "AAAA83///1s\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+jA\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 1075,
      "author": {
        "id": 1005104
      },
      "writtenOn": "2010-11-27T17:47:03Z",
      "side": 1,
      "message": "Not a big deal for now, but python 3.2 now supports os.symlink natively on windows, however it works only for NTFS partitions on windows vista and above.   Eventually, once we want to start supporting python 3.x, this check should be made to take those cases into account too. (Or be replaced by an \"if not win:\" check. )",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1k\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Why not just use _lwrite?\n\n  _lwrite(dotgit_path, \u0027gitdir: %s\u0027 % self.gitdir);\n\nYou can replace the entire 4 lines (if relink: remove, open, write) with the single function call.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///xw\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 1126,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "Will do.",
      "parentUuid": "AAAA83///1k\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1Y\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 1132,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "See above, this breaks existing clients.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///1U\u003d",
        "filename": "project.py",
        "patchSetId": 5
      },
      "lineNbr": 1224,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Breaks existing clients.",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///18\u003d",
        "filename": "repo",
        "patchSetId": 5
      },
      "lineNbr": 435,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Is three \\ really the correct number here?  I would have expected four to be necessary to get re.match() the input of [\\\\/] like we would expect it to take.\n\nThis is actually why Python has the r modifier for string literals, it reduces the number of \\ required:\n\n  re.match(r\u0027^[a-zA-Z]:[\\\\/]$\u0027, dir)",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///xs\u003d",
        "filename": "repo",
        "patchSetId": 5
      },
      "lineNbr": 435,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "Three works. That sounds cleaner. Will change",
      "parentUuid": "AAAA83///18\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n//+i8\u003d",
        "filename": "repo",
        "patchSetId": 5
      },
      "lineNbr": 435,
      "author": {
        "id": 1005104
      },
      "writtenOn": "2010-11-27T17:47:03Z",
      "side": 1,
      "message": "I think the same trick \"dir !\u003d olddir\"  would work here too and remove the windowism and regular expression.",
      "parentUuid": "AAAA9n///xs\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///2A\u003d",
        "filename": "repo",
        "patchSetId": 5
      },
      "lineNbr": 587,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "I think this will break the pager behavior on UNIX systems.  repo forall or repo diff for example can start a pager, which must be the process that the user launched.  For that to work, this process needs to become the pager, which means this process needs to become the real repo main.\n\nI\u0027m also a bit worried about that shell\u003dTrue option, does this mean we are evaluating the string \u0027 \u0027.join(me) through the shell?  If so could we run into quoting problems or other accidental interpretation of the arguments by the shell?",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///xo\u003d",
        "filename": "repo",
        "patchSetId": 5
      },
      "lineNbr": 587,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "I\u0027ll look into this.",
      "parentUuid": "AAAA83///2A\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA83///2E\u003d",
        "filename": "subcmds/forall.py",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2010-11-10T19:06:26Z",
      "side": 1,
      "message": "Does this work on Windows?  The reason I had to set O_NONBLOCK on these pipes is because we read(4096) below.  Stock Python blocks until 4096 bytes are consumed, or EOF is reached.\n\nThis can be a problem if the program being executed writes 50 bytes to stdout, and then writes 1 MB to stderr.  We\u0027ll be stuck waiting for another 4046 bytes on stdout, but the program will be stuck trying to wait for room on the stderr pipe.\n\nIs there another way in Win32 CPython to set a pipe to be non-blocking so we can get shorter-than-requested reads during our read loop below?",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "AAAA9n///xk\u003d",
        "filename": "subcmds/forall.py",
        "patchSetId": 5
      },
      "lineNbr": 216,
      "author": {
        "id": 1002619
      },
      "writtenOn": "2010-11-18T00:35:52Z",
      "side": 1,
      "message": "I didn\u0027t see an equivalent searching around and wasn\u0027t clear before why you had done this. I had just tried out the command to make sure it still works but perhaps just didn\u0027t hit that case. I\u0027ll check it out some more.",
      "parentUuid": "AAAA83///2E\u003d",
      "revId": "911c06937d1087414e31e7ac53bfc4f175e286c8",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}