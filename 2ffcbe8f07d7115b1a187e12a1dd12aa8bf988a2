{
  "comments": [
    {
      "key": {
        "uuid": "8211471d_2bf62da5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2017-05-29T12:54:53Z",
      "side": 1,
      "message": "Wouldn\u0027t the real / more generic fix to this be to not read these as binary files then? I seems awkward to replace text line separators in non-text files.",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "79cfc5da_3267ec0d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1031563
      },
      "writtenOn": "2017-05-29T16:52:08Z",
      "side": 1,
      "message": "I\u0027ll let the original repo owners answer the question. I was assuming there was a good reason a couple of open operation used \"binary\" mode (whereas all the other ones use \"text\" mode), so I didn\u0027t want to change that.",
      "parentUuid": "8211471d_2bf62da5",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "444d8d48_cc5870cc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2017-05-29T22:57:06Z",
      "side": 1,
      "message": "Shawn, do you remember why these files are being opened in binary mode?",
      "parentUuid": "79cfc5da_3267ec0d",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ad784a83_e4a0ff2d",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1001240
      },
      "writtenOn": "2017-05-29T23:01:32Z",
      "side": 1,
      "message": "My recollection is at the time Git on Windows wrote the files under its repository in binary mode, as a reference file was 40 digit hex SHA-1 and LF, not CRLF. Apparently that isn\u0027t true?\n\nI kind of agree with Sebastian above, these are text format files. If we open them as text files on Windows, the platform readline should kick in and handle the CRLF for us. But I\u0027m concerned about something not honoring the CRLF convention and writing just a trailing LF to one of these files. If we read it in text mode, will the platform readline still give us the correct line handling?",
      "parentUuid": "444d8d48_cc5870cc",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8d8533ef_d51e0b92",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2017-05-30T04:57:29Z",
      "side": 1,
      "message": "I just checked, my repos created by Git for Windows have LF only in HEAD, so I\u0027m unsure under what circumstances CRLF would be used in there. Using Python for Windows and opening the file in text mode will make fd.readline() return a string including CRLF. So all is good, probably because of Python\u0027s universal newline support [1].\n\nRenaud, could you clarify what you mean by \"sometime\" in your commit message? When do you see CRLF in HEAD files? And which Python are you using that it doe snot handle any of CRLF or LF transparently?\n\n[1] https://stackoverflow.com/a/4158708/1127485",
      "parentUuid": "ad784a83_e4a0ff2d",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "b23824a8_f8e53cbe",
        "filename": "/COMMIT_MSG",
        "patchSetId": 4
      },
      "lineNbr": 9,
      "author": {
        "id": 1031563
      },
      "writtenOn": "2017-05-30T15:59:08Z",
      "side": 1,
      "message": "\u003e Renaud, could you clarify what you mean by \"sometime\" in your commit message? When do you see CRLF in HEAD files? \n\n\"sometime\" was a matter of speaking. It was actually happening 100% of the time with the version of Git For Windows and the manifest I was working with at the time. That said, I did a quick test on my machine (\"git init\" in an empty directory), and the HEAD file is LR only. Maybe this happens with older version of Git For Windows?  I am 100% sure this happens, as I clearly recall spending more than one day tracking down the issue in the description (running a 2nd repo init would reset the branch to \"master\")\n\n\u003e And which Python are you using that it doe snot handle any of CRLF or LF transparently?\n\nI did not see that behavior. I never tried to fix this bug by using python text file handling.\n\n\u003e Using Python for Windows and opening the file in text mode will make fd.readline() return a string including CRLF. \n\nIt sounds like python\u0027s behavior is reasonable, however, the repo source code is currently written with the assumptions that (most or all?) text files uses unix line endings. If you search for \u0027\\n\u0027 in the repo source, you will find many hits. In particular, this is the line of code that was causing the bug described in this CL:\n\nhttps://gerrit.googlesource.com/git-repo/+/master/project.py#2686\n\n      if line.startswith(\u0027ref: \u0027):\n        return line[5:-1]\n\nAs you can see, it is a subtle assumption that the line ending is 1 character only. (with a CRLF ending, the returned value is a string that contains a \"CR\" character at the end in addition to the reference name)\n\nGiven how subtle the bug was, and how many hits of \u0027\\n\u0027 I found, I thought the best course of action was to try to make sure text files are always read in memory with unix line endings.",
      "parentUuid": "8d8533ef_d51e0b92",
      "revId": "2ffcbe8f07d7115b1a187e12a1dd12aa8bf988a2",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": true
    }
  ]
}