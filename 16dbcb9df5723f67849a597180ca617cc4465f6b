{
  "comments": [
    {
      "key": {
        "uuid": "26cf2074_01bceaa8",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1863,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:38:31Z",
      "side": 1,
      "message": "Honestly a little surprised that p.stderr is an actual file descriptor and not just a file-like object :)",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_827d5a6c",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1871,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:38:31Z",
      "side": 1,
      "message": "Ideally all this non-blocking I/O logic goes in GitCommand itself, but I\u0027m trying to think of a good interface. Maybe a \"tee_stderr\u003dTrue\" arg that preserves output to stderr and also saves in a cStringIO or something?",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_a2917e21",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1871,
      "author": {
        "id": 1017359
      },
      "writtenOn": "2015-03-17T21:43:34Z",
      "side": 1,
      "message": "Agreed.  I was trying to not to make too many changes, but this could possibly be useful to other uses...",
      "parentUuid": "46cc147d_827d5a6c",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_426a729b",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1871,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:47:04Z",
      "side": 1,
      "message": "I\u0027m always in favor of more changes if they make the code cleaner and more useful :)",
      "parentUuid": "46cc147d_a2917e21",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_6278567b",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1873,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:38:31Z",
      "side": 1,
      "message": "Hm, fcntl isn\u0027t available on Windows AFAICT. But I honestly don\u0027t know if we support repo on Windows.",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26cf2074_a1db3e18",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1873,
      "author": {
        "id": 1017359
      },
      "writtenOn": "2015-03-17T21:43:34Z",
      "side": 1,
      "message": "I copied a lot of this code from subcmd/forall.py in the DoWork() function.",
      "parentUuid": "46cc147d_6278567b",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_22656eca",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1873,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:47:04Z",
      "side": 1,
      "message": "TMYK, thanks.",
      "parentUuid": "26cf2074_a1db3e18",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26cf2074_21e80eaa",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1883,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:38:31Z",
      "side": 1,
      "message": "This doesn\u0027t work if the text is split across two buffers. You need to hold onto at least the last len(\"git remote prune\")-1 bytes and prepend that to the current buffer.\n\nOr just buffer the whole darn thing in memory. That is certainly less memory efficient, but I think it would make the GitCommand interface cleaner.",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_c28e82fe",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1883,
      "author": {
        "id": 1017359
      },
      "writtenOn": "2015-03-17T21:43:34Z",
      "side": 1,
      "message": "Yeah, I was thinking about that.  In my testing it did catch the error case and did do the \u0027git remote prune\u0027 as needed. I was just thinking to fix it I would have to either capture all the output or spend time trying to make sure we have a full line of text to process.  But if this gets moved into GitCommand, then maybe a mute point.",
      "parentUuid": "26cf2074_21e80eaa",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "46cc147d_e28b86eb",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1883,
      "author": {
        "id": 1017359
      },
      "writtenOn": "2015-03-17T21:45:22Z",
      "side": 1,
      "message": "s/mute/moot/  :)",
      "parentUuid": "46cc147d_c28e82fe",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "26cf2074_21972e22",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1883,
      "author": {
        "id": 1010008
      },
      "writtenOn": "2015-03-17T21:47:04Z",
      "side": 1,
      "message": "Mostly a moot point if you move it into GitCommand, yes. Except if you\u0027re trying to come up with an interface to support streamy processing of stderr, you should definitely _not_ use a callback function that takes a single bufferful of data as an arg :)",
      "parentUuid": "46cc147d_c28e82fe",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6692f867_0bbb3d0a",
        "filename": "project.py",
        "patchSetId": 4
      },
      "lineNbr": 1883,
      "author": {
        "id": 1017359
      },
      "writtenOn": "2015-03-17T22:52:39Z",
      "side": 1,
      "message": "As a note, doing:\n $ git clone --progress https://android.googlesource.com/platform/frameworks/base \u003e out.txt 2\u003eerr.txt\n $ ll  err.txt \n -rw-rw-r-- 1 jlvillal jlvillal 95834 Mar 17 15:11 err.txt\n\nSo the stderr output isn\u0027t really that large, in my opinion.  And that was for a repository of 1.57GB.",
      "parentUuid": "26cf2074_21972e22",
      "revId": "16dbcb9df5723f67849a597180ca617cc4465f6b",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}