{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "6d90d310_7bf390d1",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 686,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                \"Keyboard interrupt while processing %s\", project.name\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "6c7c07e0_100b23f6",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 686,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6d90d310_7bf390d1",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6fa64365_3d2cbd97",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 689,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n            self.logger.error(\"error.GitError: Cannot fetch %s\", e)\n```\n\nnow that you\u0027re using logger APIs, you need to pass them as args and not interp the string directly.  this avoids `%` escaping and crashing the logger.",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9d12c91e_ac6d92e4",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 689,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6fa64365_3d2cbd97",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00fc74b0_d3c9cd44",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 696,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                e,\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "0a1cce06_9542fd1e",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 696,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00fc74b0_d3c9cd44",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d9ebbeb0_15bb43aa",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 898,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                self.logger.error(\"%s\", e)\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "090068c9_e8ad26cd",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 898,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "One of the design we agreed upon was for our custom logger to accept exceptions. This is done by choice.",
      "parentUuid": "d9ebbeb0_15bb43aa",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6407a81d_601a1963",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 960,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                \"error.GitError: Cannot checkout %s: %s\", project.name, e\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7d53ea43_387768ec",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 960,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6407a81d_601a1963",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "91a6479b_92da4d71",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 968,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                e,\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3de5839a_8a4b610d",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 968,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "91a6479b_92da4d71",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "40191327_a0f4c1e4",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1113,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                        \"%s: not shared, disabling pruning.\", relpath\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ad691cbc_480c13cf",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1113,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "40191327_a0f4c1e4",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f0f03cd9_e1b9a332",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                self.logger.error(\"%s\", err_msg)\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a4303030_06db4fed",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Given the `RepoLogger` also colors the errors messages, it ends up combining this anyway. Is there a reason to do this?",
      "parentUuid": "f0f03cd9_e1b9a332",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "85b18cf7_567043f9",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-28T18:46:24Z",
      "side": 1,
      "message": "i\u0027m not sure what you mean.  we can\u0027t pass a string to Coloring that might have a `%` in it either.  it\u0027ll crash in both cases.",
      "parentUuid": "a4303030_06db4fed",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "36626be1_e5ce30e0",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-29T18:40:59Z",
      "side": 1,
      "message": "Why would it fail if the msg contains a `%` sign?",
      "parentUuid": "85b18cf7_567043f9",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5284bc6c_ec33483f",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-30T19:04:59Z",
      "side": 1,
      "message": "coloring does % interpolation.  look at the implementation:\n\n```\nclass LogColoring(Coloring):\n    \"\"\"Coloring outstream for logging.\"\"\"  \n\n    def __init__(self, config):\n        super().__init__(config, \"logs\")\n        self.error \u003d self.colorer(\"error\", fg\u003d\"red\")\n        self.warning \u003d self.colorer(\"warn\", fg\u003d\"yellow\")\n...\n    def colorer(self, opt\u003dNone, fg\u003dNone, bg\u003dNone, attr\u003dNone):\n        if self._on:\n            c \u003d self._parse(opt, fg, bg, attr)\n\n            def f(fmt, *args):\n                output \u003d fmt % args\n                return \"\".join([c, output, RESET])\n\n            return f\n```\n\nyou can easily verify this too:\n\n```\n$ python -c \u0027import repo_logging; logger \u003d repo_logging.RepoLogger(\"foo\"); logger.error(\"%s\")\u0027\nTraceback (most recent call last):\n  File \"\u003cstring\u003e\", line 1, in \u003cmodule\u003e\n  File \".../repo/repo_logging.py\", line 59, in error\n    colored_error \u003d self.colorer.error(msg, *args)\n                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \".../repo/color.py\", line 167, in f\n    output \u003d fmt % args\n             ~~~~^~~~~~\nTypeError: not enough arguments for format string\n```\n\nlooks like the logging module has some logic to automatically insert `%s` for you if you only pass one argument.  i thought it would crash, but maybe it only crashes if you have multiple args but not the right number of `%`.\n\n```\n$ python\n\u003e\u003e\u003e import logging\n\n\u003e\u003e\u003e logging.error(\"%s\")\nERROR:root:%s\n\n\u003e\u003e\u003e logging.error(\"%s %s\", 1)\n--- Logging error ---\nTraceback (most recent call last):\n...\n\n\u003e\u003e\u003e logging.error(\"%s %s\", 1, 2, 3)\n--- Logging error ---\nTraceback (most recent call last):\n```",
      "parentUuid": "36626be1_e5ce30e0",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "47dbd8d0_ee301ad8",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1780,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-30T20:29:50Z",
      "side": 1,
      "message": "I made an assumption that `RepoLogger` will interpret format strings as format strings, as in, calling `logger.error(\"%s\")` would be invalid. But this makes sense. I will update this; thanks for the explanation!",
      "parentUuid": "5284bc6c_ec33483f",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f6a4d0d6_4a2987de",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1876,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-08-24T15:18:19Z",
      "side": 1,
      "message": "```suggestion\n                \"repo version %s is current\", rp.work_git.describe(HEAD)\n```",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "10f4b2e0_f82276e2",
        "filename": "subcmds/sync.py",
        "patchSetId": 12
      },
      "lineNbr": 1876,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-08-24T18:24:57Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f6a4d0d6_4a2987de",
      "revId": "512c640f6b506917744945e53e4e62d11eb5b84f",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}