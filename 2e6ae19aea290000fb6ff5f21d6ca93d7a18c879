{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "273596f4_5069a908",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2023-03-23T21:20:29Z",
      "side": 1,
      "message": "If we have an `objects` directory (rather than a symlink to project-objects), we need to use that for the project.",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "670c3fb5_3203d4ff",
        "filename": "manifest_xml.py",
        "patchSetId": 1
      },
      "lineNbr": 1918,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-03-23T23:44:18Z",
      "side": 1,
      "message": "{gitdir}/objects always exists.  it\u0027s either a symlink to project-objects, or if `_ALTERNATES` is true, it\u0027s a standalone dir.  in both cases, isdir returns True.\n\nso seems like we should always return objdir\u003dgitdir ?",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2bed0eba_0dca29a8",
        "filename": "manifest_xml.py",
        "patchSetId": 1
      },
      "lineNbr": 1918,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2023-03-24T16:55:02Z",
      "side": 1,
      "message": "Done.  By that logic, we probably want to revisit the code in git_command and see if we should ever be setting GIT_OBJECT_DIRECTORY (or GIT_ALTERNATE_DIRECTORIES, for that matter.)  That warrants a separate change, and more testing.",
      "parentUuid": "670c3fb5_3203d4ff",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e692fda5_880a6627",
        "filename": "manifest_xml.py",
        "patchSetId": 1
      },
      "lineNbr": 1918,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2023-03-24T17:01:29Z",
      "side": 1,
      "message": "{gitdir}/objects always exists *AFTER* the initial sync of the project.  patchset2 results in never using .repo/project-objects at all.",
      "parentUuid": "2bed0eba_0dca29a8",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3e2a454e_ce7ab92a",
        "filename": "manifest_xml.py",
        "patchSetId": 1
      },
      "lineNbr": 1918,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-03-25T06:20:10Z",
      "side": 1,
      "message": "the point of my previous work was to stop using symlinks with gitdir/objects/.  but that hasn\u0027t completed, so we have to support both modes.\n\nthe git_command logic still looks correct to me.  GIT_OBJECT_DIRECTORY is project-objects because we want to store common objects fetched from the remote to that dir, and GIT_ALTERNATE_DIRECTORIES points to gitdir/objects/ in case the git negotiation uses a branch with unique objects that exist only in that one checkout.  if we got rid of that logic, we\u0027d lose the object sharing, which was the entire point of project-objects.",
      "parentUuid": "e692fda5_880a6627",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46e45758_f2c58a1e",
        "filename": "manifest_xml.py",
        "patchSetId": 1
      },
      "lineNbr": 1918,
      "author": {
        "id": 1133306
      },
      "writtenOn": "2023-10-13T18:42:36Z",
      "side": 1,
      "message": "As you mention in go/repo-shared-project-corruption, because we split internal git state in a way that it does not expect, we need to have `git gc` run with a state that is consistent for the object store as we have created it.\n\nWhen the sync operation triggers `git gc`, GIT_OBJECT_DIRECTORY is treated as mutable, GIT_ALTERNATE_OBJECT_DIRECTORIES (and `objecst/info/alternates`) are treated as immutable.  To prevent corruption in `.repo/project-objects`, we need `git fetch` (specifically the associated `git pack` / `git gc`) to treat project-objects as immutable",
      "parentUuid": "3e2a454e_ce7ab92a",
      "revId": "2e6ae19aea290000fb6ff5f21d6ca93d7a18c879",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}