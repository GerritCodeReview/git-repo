{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "618c0e60_3f8562ee",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T20:18:32Z",
      "side": 1,
      "message": "I see that you marked several comments \"Done\" but didn\u0027t upload a new patch set. Did you forget to upload?",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7cab5e84_204e51a6",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 2
      },
      "lineNbr": 0,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-26T17:47:10Z",
      "side": 1,
      "message": "I was too optimistic that git push will succeed... It has been uploaded now.",
      "parentUuid": "618c0e60_3f8562ee",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7840fe9f_900c6231",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:00:25Z",
      "side": 1,
      "message": "Document what the intended return value is and why it matters",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4589a1cd_2783b046",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 91,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-23T18:30:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "7840fe9f_900c6231",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "046527d3_634121e2",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:00:25Z",
      "side": 1,
      "message": "I\u0027m not sure what `depth_stack` is supposed to represent -- could you please add a comment?\n\n(Note: without understanding that, I don\u0027t fully understand the algorithm so I can\u0027t provide high-level feedback on this function yet)",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "67a62911_c032d9d9",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 94,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-23T18:30:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "046527d3_634121e2",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f89b65ac_e63e3b96",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:00:25Z",
      "side": 1,
      "message": "nit: per go/pystyle#exceptions-decision, minimize the amount of code in a `try` block.\n\n```\ntry:\n    Path(checkout.relpath).relative_to(Path(depth_stack[-1].relpath))\nexcept ValueError:\n    depth_stack.pop()\nelse:\n    if len(depth_stack) \u003e\u003d len(res):\n        res.append([])\n    break\n```",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e23375f2_e3a1017b",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 97,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-23T18:30:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "f89b65ac_e63e3b96",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "baf02e8d_3ae20300",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:00:25Z",
      "side": 1,
      "message": "Probably worth documenting why the `ValueError` is meaningful here",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "e90be99a_e72bcb4b",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 104,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-23T18:30:03Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "baf02e8d_3ae20300",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f2f6749e_64d6cc2e",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:00:25Z",
      "side": 1,
      "message": "At a high level, this approach introduces needless bottlenecks. For example, if we have 1,000 projects, including a nested trio of `/outer`, `/outer/middle`, and `/outer/middle/inner`, then we\u0027re going to have one layer of 998 projects, and two layers of one project each. That\u0027s not the end of the world, but I think we can be more efficient.\n\nAs an alternative, I\u0027ve been toying with the idea of using `threading.Barrier`s to prevent the race condition you suggested in my CL. We would just need a flat-sorted list to make sure we approach the outer projects before their nested products, and each inner project would be blocked during `_CheckoutOne` until all its outer projects clear their barriers.\n\nWDYT -- is the bottleneck a concern we should work around?",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1980dee_b543c174",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T18:06:49Z",
      "side": 1,
      "message": "Just saw your benchmarks. A 100ms \u003d 2.5% difference on ChromeOS is acceptable.\n\nHowever, I think it\u0027ll be worse for a first-time or stale sync. When you\u0027re rerunning `repo sync` on a freshly synced checkout, the bottleneck hardly needs to do any work at all. When you\u0027re running it on a stale checkout, each layer of `_SafeCheckoutOrder` adds genuine work in serial.",
      "parentUuid": "f2f6749e_64d6cc2e",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "1100c8fa_e1972136",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1096638
      },
      "writtenOn": "2024-02-23T18:30:03Z",
      "side": 1,
      "message": "I don\u0027t think it\u0027s worth the effort. If you also account for networking to fetch the latest code, checkout is just a tiny portion of repo sync time.\n\nAlso, the goal for ChromeOS is to unnest everything, and Android is already there. That means we won\u0027t see any performance benefits once we are done with that project. I can also see us reverting this change once we are fully done with unnesting + a buffer of a few months.",
      "parentUuid": "f2f6749e_64d6cc2e",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "a2a0c3af_9da42107",
        "filename": "subcmds/sync.py",
        "patchSetId": 2
      },
      "lineNbr": 1062,
      "author": {
        "id": 1081020
      },
      "writtenOn": "2024-02-23T20:18:32Z",
      "side": 1,
      "message": "Acknowledged",
      "parentUuid": "1100c8fa_e1972136",
      "revId": "724876b993cb17422b2053c3f4dcd1bde343b978",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}