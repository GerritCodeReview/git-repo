{
  "comments": [
    {
      "key": {
        "uuid": "2043bf51_8f6e750e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1017837
      },
      "writtenOn": "2016-06-28T17:47:43Z",
      "side": 1,
      "message": "The underlying Git is learning possibly about depth and fixed sha1s, too, see http://thread.gmane.org/gmane.comp.version-control.git/298414\n\nI wonder if we want to rush it here in repo or wait for a Git upstream solution for good sha1 fetching.",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 12
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c033c3f3_ac3943e3",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-06-29T01:02:08Z",
      "side": 1,
      "message": "Unfortunately many users of repo do not (or cannot) use the latest version of git, so it might be better to work around it.",
      "parentUuid": "2043bf51_8f6e750e",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 12
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "002a3b7a_ae95b7fc",
        "filename": "/COMMIT_MSG",
        "patchSetId": 2
      },
      "lineNbr": 16,
      "author": {
        "id": 1021072
      },
      "writtenOn": "2016-06-29T01:14:33Z",
      "side": 1,
      "message": "We can decide what to do based on git version, with older versions falling back. But this has the potential to pull down extremely large amounts of data, so I\u0027d like to check how our current usecases are working (or not).",
      "parentUuid": "c033c3f3_ac3943e3",
      "range": {
        "startLine": 13,
        "startChar": 0,
        "endLine": 16,
        "endChar": 12
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1c7f1b9a_759be850",
        "filename": "project.py",
        "patchSetId": 2
      },
      "lineNbr": 1994,
      "author": {
        "id": 1021072
      },
      "writtenOn": "2016-10-17T09:43:25Z",
      "side": 1,
      "message": "Is this retry without clone_depth not working for you?",
      "range": {
        "startLine": 1991,
        "startChar": 0,
        "endLine": 1994,
        "endChar": 79
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dca2e37b_e3b7328a",
        "filename": "project.py",
        "patchSetId": 2
      },
      "lineNbr": 1994,
      "author": {
        "id": 1025422
      },
      "writtenOn": "2016-10-17T12:55:18Z",
      "side": 1,
      "message": "I made a test without my patch and it\u0027s not working because self.clone_depth is empty. If a add a print of self.clone_depth at the beginning of _RemoteFetch(), I get this log:\n\n\"\"\"\n $ repo init -u /url/of/manifest --depth\u003d1\n $ repo sync\n self.clone_depth\u003dNone\n Fetching project a\n self.clone_depth\u003d\n True\n True\n dev\n error: Cannot fetch a\n\n error: Exited sync due to fetch errors\n\"\"\"\n\nIf I add attribute clone-depth\u003d\"1\" to project \"a\" in manifest, the condition \"if self.clone_depth\" is verified but fetch still fails.",
      "parentUuid": "1c7f1b9a_759be850",
      "range": {
        "startLine": 1991,
        "startChar": 0,
        "endLine": 1994,
        "endChar": 79
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "dca2e37b_23cd4a18",
        "filename": "project.py",
        "patchSetId": 2
      },
      "lineNbr": 1994,
      "author": {
        "id": 1025422
      },
      "writtenOn": "2016-10-17T13:15:10Z",
      "side": 1,
      "message": "\u003e If I add attribute clone-depth\u003d\"1\" to project \"a\" in manifest, the condition \"if self.clone_depth\" is verified but fetch still fails.\n\nThis works if I don\u0027t add depth\u003d1 to repo init command AND I add clone-depth\u003d\"1\" attribute to manifest. So maybe the \"real\" fix is to make this fallback work for both cases?\n\n* clone-depth\u003d\"1\" attribute added to manifest\n* and, depth\u003d1 passed to repo init command",
      "parentUuid": "dca2e37b_e3b7328a",
      "range": {
        "startLine": 1991,
        "startChar": 0,
        "endLine": 1994,
        "endChar": 79
      },
      "revId": "482cc10605ad6d0dd631bab477fc1a942f4c59b6",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}