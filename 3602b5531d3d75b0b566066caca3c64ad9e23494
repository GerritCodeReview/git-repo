{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "486607e4_a9e1aff8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-02T18:40:17Z",
      "side": 1,
      "message": "please scope your commits.  this would be `tests:`.",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "23b68315_544f93c7",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 7,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-02T20:05:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "486607e4_a9e1aff8",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8fe17edb_c0a0b2b8",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-02T18:40:17Z",
      "side": 1,
      "message": "we use `Bug:` tags in this project",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "283fcd23_069a3ed5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 9,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-02T20:05:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8fe17edb_c0a0b2b8",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0cdd564f_4364646d",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-02T18:40:17Z",
      "side": 1,
      "message": "```suggestion\n    \"\"\"Set HOME to a temporary directory, avoiding user\u0027s .gitconfig.\n```\n\nplease follow docstring standards",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "cf404115_e6a664e2",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 37,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-02T20:05:05Z",
      "side": 1,
      "message": "Done. Thanks for catching that. I use a different style in other projects and forgot to context switch.",
      "parentUuid": "0cdd564f_4364646d",
      "range": {
        "startLine": 36,
        "startChar": 0,
        "endLine": 37,
        "endChar": 66
      },
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b49761b6_aecf0ee8",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-02T18:40:17Z",
      "side": 1,
      "message": "shouldn\u0027t we `yield` and not return anything ?",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "ab5f9b4c_e0ec5d63",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-02T20:05:05Z",
      "side": 1,
      "message": "`yield` fixtures are only needed if there\u0027s some cleanup needed after yielding a result. Since the temp dir and monkeysession already handle tearing down the state, there\u0027s no need for a yield fixture and a simple return is fine (and preferred).",
      "parentUuid": "b49761b6_aecf0ee8",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8998a262_d5f3059b",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-03T03:08:03Z",
      "side": 1,
      "message": "preferred according to what ?  if the value is never used, we shouldn\u0027t be returning it as it\u0027ll just confuse people.",
      "parentUuid": "ab5f9b4c_e0ec5d63",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "03c87647_c75d6afe",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-03T14:41:43Z",
      "side": 1,
      "message": "The [pytest fixtures docs](https://docs.pytest.org/en/latest/how-to/fixtures.html) don\u0027t explicitly state that a simple return is preferred, but looking at many of the examples, `yield` is only used when some cleanup follows. In all other cases, `return` is used.\n\n\u003e if the value is never used, we shouldn\u0027t be returning it as it\u0027ll just confuse people.\n\nMy reasoning was this - yes, it\u0027s unused in the current state, but should a future function wish to reference the home directory, perhaps to test something with `.gitconfig`, it can solicit `alt_home`. For example:\n\n```\ndef test_corrupt_gitconfig(alt_home):\n  alt_home.joinpath(\u0027.gitconfig\u0027).write_text(\u0027bad syntax\u0027)\n  ...\n```\n\nOr less aggressively:\n\n```\ndef test_files_in_home(alt_home):\n  ...\n  assert len(list(alt_home.glob(\u0027.gitignore_global\u0027))) \u003d\u003d 1\n```\n\nIn my experience, if a fixture creates some thing, it should return a reference to that thing if there\u0027s any likelihood that a caller of that fixture might find it useful.\n\nThat said, I notice that the \u0027corrupt_gitconfig\u0027 example points to a possible problem with this session-scoped fixture. Any change to the home directory is going to have an effect across tests. Maybe the fixture shouldn\u0027t be session-scoped.\n\nI\u0027ve also realized since writing this that the technique doesn\u0027t honor Windows, where USERPROFILE needs to be set to affect `~`/`os.path.expanduser`. I see I\u0027ve [dealt with this problem before](https://github.com/pypa/setuptools/commit/f866311d60f54499c3637309e3429780d8c8f218), suggesting maybe this behavior should be generalized into a library.\n\nIn light of these concerns, I\u0027m going to revisit the approach altogether.",
      "parentUuid": "8998a262_d5f3059b",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "90b9b3e8_8b628f15",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-03T15:35:18Z",
      "side": 1,
      "message": "I explored creating a re-usable plugin for pytest with an `alt_home` fixture (https://pypi.org/project/pytest-home), but then I learned that a function-scoped fixture isn\u0027t viable in this environment because the tests utilize unittest constructs and the `setupClass` (where git operations are run) happens before any function-scoped fixture. Therefore, it\u0027s not possible to simply utilize a function-scoped fixture.",
      "parentUuid": "03c87647_c75d6afe",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "53d05bad_91f0b001",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-03T15:43:50Z",
      "side": 1,
      "message": "In the latest patch, I\u0027ve addressed the concern, no longer returning any value for `alt_home` and simply relying on the side-effect to avoid confusing users. I\u0027ve also incorporated Windows compatibility.",
      "parentUuid": "90b9b3e8_8b628f15",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9f7be8aa_ec8f5c1e",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-04T02:36:10Z",
      "side": 1,
      "message": "i get why, in general, we\u0027d return a value in a normal fixture that isn\u0027t a context manager.  that doesn\u0027t make sense in an autouse fixture where the value would never be accessible.  but your example of people who want to access the path directly in case they want to seed it (rather than indirectly via os.path.expanduser) is reasonable if you want to keep the return.  just make sure to write a proper docstring for it.\n\nseems like the latest version still suffers from your earlier point though -- tests bleed state between them, and that\u0027s not desirable.  i think reducing the scope to per-test shouldn\u0027t really add measurable overhead here.",
      "parentUuid": "53d05bad_91f0b001",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f73ab6a3_d9f9d500",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-04T12:52:11Z",
      "side": 1,
      "message": "It\u0027s not possible to use a function-scoped fixture because the class-scoped unittest setup (`GitCheckoutTestCase.setUpClass`) relies on the alternate home, but function-scoped fixtures are executed after class-scoped fixtures.\n\nMy preference would be to make the git repo setup a function-scoped fixture, but I can see it was explicitly set up as a class-level fixture as a performance optimization.\n\nIt\u0027s conceivable we could add yet another fixture that checks or enforces that the home directory is empty on each test, and I considered doing that when I realized that this change doesn\u0027t affect the persistence of changes in $HOME across tests. That is, prior to this change, if a test affected $HOME, it too would persist across tests, so this change is no worse than the prior behavior. At least now, if something is altered in $HOME, it will be isolated to the session and won\u0027t mutate the user\u0027s environment.",
      "parentUuid": "9f7be8aa_ec8f5c1e",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "32b90ddb_e51a0ca0",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-04T18:57:09Z",
      "side": 1,
      "message": "sorry, but i\u0027m not seeing how `GitCheckoutTestCase.setUpClass` is relevant here.  we\u0027re talking about $HOME init.  that `setUpClass` is creating a tempdir under the global tempdirectory, it isn\u0027t under the $HOME dir.  nuking \u0026 recreating the $HOME dir across tests should have no impact on the tempdir created there.\n\ni guess if the user had setup the global tempdir under $HOME this would be a problem, but that\u0027s certainly not how Linux or macOS works.  although, even if it was, wouldn\u0027t the class setup run before the per-function $HOME ?  so it would be created/persistent in the right place and not under the fake $HOME tree.",
      "parentUuid": "f73ab6a3_d9f9d500",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6a443db7_0302f93b",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-04T21:00:52Z",
      "side": 1,
      "message": "No problem. This issue is somewhat obscure.\n\nOne aspect of the issue is that, because my Git client is configured to [sign tags](https://github.com/jaraco/dotfiles/blob/2349dfbf9f9a418e1d26199193527846781056b4/.gitconfig#L13-L14), that implies `git tag --annotate`, so when `GitCheckoutTestCase.setUpClass` is called, it [attempts to tag a commit](https://gerrit.googlesource.com/git-repo/+/refs/heads/main/tests/test_wrapper.py#497), which in my environment opens an editor to solicit the message for the annotated tag, opening vim and blocking forever or opening `subl -nowait` depending on whether `EDITOR` was filtered by `tox`. On my Linux host, the gpg key isn\u0027t installed, so `setUpTest` fails earlier on `git commit`.\n\nSetting $HOME in advance of that `setUpClass` causes the `git` subprocess to resolve `~/.gitconfig` not to the user\u0027s config and bypasses all issues triggered by honoring the tester\u0027s git config.\n\nSetting $HOME after `setUpClass` runs has no effect on `setUpClass` so any undesirable behaviors are still encountered.\n\nIf you\u0027d like to experience the issue for yourself, I suspect you can replicate the issue I encountered by putting `commit.gpgsign\u003dtrue` or `tag.gpgsign\u003dtrue` in your config. You may also need to add `user.signingkey\u003d0123456789ABCDEF`.",
      "parentUuid": "32b90ddb_e51a0ca0",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e1637b37_0093b1d8",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-05T01:40:42Z",
      "side": 1,
      "message": "ok, so it\u0027s more a matter of ordering here, not the lifetime of things.  creating a tempdir \u0026 setting an envvar is cheap, so add 2 autouse fixtures ?  one for session so it\u0027s executed early and covers things like class init, and one for function so we\u0027re guaranteed fresh state in each test.  and just leave a comment in the session explaining why there\u0027s a \"duplicate\" one.\n\ni\u0027m not doubting you that $HOME settings are bleeding in and causing problems.  we\u0027ve had that happen before.",
      "parentUuid": "6a443db7_0302f93b",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07e21d7f_7777f4a1",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-05T14:12:09Z",
      "side": 1,
      "message": "I considered the \"bleeding state in $HOME\" a separate concern from what this change is attempting to address, but since you\u0027ve recommended it, I\u0027ve gone ahead and added a `clean_home` fixture that addresses this additional concern. No need for duplication or an explanation - simply two fixtures addressing two concerns, but with one dependent on the other (don\u0027t want to go clearing the user\u0027s real home dir). PTAL.",
      "parentUuid": "e1637b37_0093b1d8",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "56b19582_94f03e3c",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-05T14:38:12Z",
      "side": 1,
      "message": "it\u0027s somewhat of a sep concern ($HOME shouldn\u0027t bleed into tests, either state outside of the testsuite, or across tests), but the solution is basically the same.\n\nwe don\u0027t need to manually rmtree the dir, we just need a fresh one, and let the framework nuke the toplevel tmpdir when done.\n\n```\n@pytest.fixture\ndef tmp_homedir(tmp_path_factory, monkeysession):\n    vars \u003d [\"HOME\"] + platform_utils.isWindows() * [\"USERPROFILE\"]\n    home \u003d tmp_path_factory.mktemp(\"home\")\n    for var in vars:\n        monkeysession.setenv(var, str(home))\n    return home\n\n@pytest.fixture(autouse\u003dTrue, scope\u003d\"session\")\ndef _early_session_homedir(tmp_homedir):\n    \"\"\"...\"\"\"\n\n@pytest.fixture(autouse\u003dTrue)\ndef _per_test_homedir(tmp_homedir):\n    \"\"\"...\"\"\"\n```\n\ni haven\u0027t tried this, but seems like it should work ?",
      "parentUuid": "07e21d7f_7777f4a1",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5931051_09920b0c",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-05T15:36:13Z",
      "side": 1,
      "message": "That won\u0027t work. You can\u0027t have a session-scoped fixture dependent on a function-scoped fixture (or any lower level fixture). The first fixture, `tmp_homedir`, is implicitly a function-scoped fixture (same as if you\u0027d specified `pytest.fixture(scope\u003d\u0027function\u0027)`).\n\nIf we wanted to embark on making everything function-scoped, including the `GitCheckoutTestCase`, we could rely on the tempdir functionality for cleanup, but because of that test, the home dir needs to be created at the class scope or higher, meaning it can only be cleaned up at the class scope or higher, unless we instead alter it explicitly as `clean_home` does.\n\nMoreover, even if the three-fixture approach could work, I\u0027d prefer the implementation I\u0027ve presented, which is fewer functions and better separation of concerns. How do you feel about moving forward with the approach as drafted and leaving further improvements for later?",
      "parentUuid": "56b19582_94f03e3c",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "39e95ce5_06901b55",
        "filename": "tests/conftest.py",
        "patchSetId": 1
      },
      "lineNbr": 43,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-10-05T16:45:08Z",
      "side": 1,
      "message": "running rmtree on the dir is not simpler imo.  letting it orphan the dir and just creating a new one on each run, and letting the overall pytest framework delete everything at the end in one swoop sounds simpler to me.  overhead wise, doesn\u0027t seem significant since we shouldn\u0027t really be creating anything in $HOME to begin with.\n\nthis seems to work for me\n\n```py\ndef _set_homedir(home, mp):\n    vars \u003d [\"HOME\"] + platform_utils.isWindows() * [\"USERPROFILE\"]\n    for var in vars:\n        mp.setenv(var, str(home))\n\n@pytest.fixture(autouse\u003dTrue, scope\u003d\"session\")\ndef session_tmp_homedir(tmp_path_factory, monkeysession):\n    home \u003d tmp_path_factory.mktemp(\"home\")\n    _set_homedir(home, monkeysession)\n    return home\n\n@pytest.fixture(autouse\u003dTrue)\ndef tmp_homedir(tmp_path, monkeypatch):\n    _set_homedir(tmp_path, monkeypatch)\n    return tmp_path\n```\n\nand if we wanted to RVO it to save a few LOC:\n\n```py\ndef _set_homedir(home, mp):\n    vars \u003d [\"HOME\"] + platform_utils.isWindows() * [\"USERPROFILE\"]\n    for var in vars:\n        mp.setenv(var, str(home))\n    return home\n\n@pytest.fixture(autouse\u003dTrue, scope\u003d\"session\")\ndef session_tmp_homedir(tmp_path_factory, monkeysession):\n    return _set_homedir(tmp_path_factory.mktemp(\"home\"), monkeysession)\n\n@pytest.fixture(autouse\u003dTrue)\ndef tmp_homedir(tmp_path, monkeypatch):\n    return _set_homedir(tmp_path, monkeypatch)\n```",
      "parentUuid": "f5931051_09920b0c",
      "revId": "3602b5531d3d75b0b566066caca3c64ad9e23494",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}