{
  "comments": [
    {
      "key": {
        "uuid": "8b2d5e79_a8047b3b",
        "filename": "project.py",
        "patchSetId": 1
      },
      "lineNbr": 2469,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-15T09:03:40Z",
      "side": 1,
      "message": "nit: wrap long lines",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "2820f890_d5765cda",
        "filename": "project.py",
        "patchSetId": 1
      },
      "lineNbr": 2469,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2016-04-15T11:46:22Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "8b2d5e79_a8047b3b",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2d5e79_c8f9af66",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-15T09:03:40Z",
      "side": 1,
      "message": "What if the user enters something that doesn\u0027t match the expected format?\n\nWould it be feasible to limit this to a known set of formats and add some validation steps?",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "ab4dc25b_b13a20c1",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2016-04-15T11:51:21Z",
      "side": 1,
      "message": "By \"expected format\" I guess you mean \"valid format\" in sense what Git supports? I don\u0027t think we should do any checks here but leave it to Git to fail in that case.",
      "parentUuid": "8b2d5e79_c8f9af66",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "8b2d5e79_c8652fab",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-18T01:25:11Z",
      "side": 1,
      "message": "Yes, that\u0027s what I meant.\n\nHave you confirmed what it does if an invalid (not supported by git) value is given?  I.e. does it catch it and display a user-friendly error message, or just dump a backtrace to the console?",
      "parentUuid": "ab4dc25b_b13a20c1",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "88dc84fe_d0475c9c",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2016-04-19T07:53:39Z",
      "side": 1,
      "message": "It behaves then exactly as Git itself does: In case of an invalid / unsupported format string, the given characters are simply printed literally and not expanded. In that sense neither vanilla Git nor git-repo fail.",
      "parentUuid": "8b2d5e79_c8652fab",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "c8d2fce6_12696cf5",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1011123
      },
      "writtenOn": "2016-04-19T12:44:39Z",
      "side": 1,
      "message": "So just to confirm, it prints a formatted error message to the console, rather than an error message at the bottom of a backtrace?",
      "parentUuid": "88dc84fe_d0475c9c",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "a8d5c8d0_91723cac",
        "filename": "subcmds/diffmanifests.py",
        "patchSetId": 1
      },
      "lineNbr": 76,
      "author": {
        "id": 1015513
      },
      "writtenOn": "2016-04-19T15:09:17Z",
      "side": 1,
      "message": "No. There is no dedicated error message printed at all. If you do something like\n\n    $ repo diffmanifests $PWD/manifest_before_sync.xml $PWD/manifest_after_sync.xml --pretty-format\u003dformat:this_is_an_invalid_format_string\n\nThen you\u0027d get something like\n\n\tchanged projects :\n\n\t\t\tProjA changed from 910b57479e7881c977d8813603ce1ac600045925 to 5447464636454173f4baea7184bc59e8a7bac226\n\t\t\t\t\t[+] this_is_an_invalid_format_string\n\t\t\t\t\t[+] this_is_an_invalid_format_string\n\t\t\t\t\t[+] this_is_an_invalid_format_string\n\t\t\t\t\t[+] this_is_an_invalid_format_string\n\nGit itself does not fail on this format string, so repo shouldn\u0027t either, IMO. From the log output it\u0027s quite obvious that something went wrong and what, i.e. that there must be an error in the format string.",
      "parentUuid": "c8d2fce6_12696cf5",
      "revId": "c8987748a1cb3fd079d07ff70936dcd677308010",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153",
      "unresolved": false
    }
  ]
}