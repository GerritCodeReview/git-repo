{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "3e456052_38704f92",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-10-31T16:17:37Z",
      "side": 1,
      "message": "While hand-editing the format strings, I stumbled on this code that seemed unnecessarily complex, so I took a stab at reducing the complexity. Although somewhat less common to use boolean algebra to compute results, I believe this approach is simpler and more intuitive and symmetric to [similar operations with lists](https://source.corp.google.com/h/gerrit/git-repo/+/main:tests/conftest.py;l\u003d37;drc\u003d024df06ec15d7304fbb5f9a2b1aa44f2af9daf4c). Let me know what you think.",
      "revId": "678d0ed2e3471b861919ac63bd7a7c31020865a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ec4db8ab_22c1e51e",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-11-01T01:29:39Z",
      "side": 1,
      "message": "i dunno man, i don\u0027t think i\u0027ve ever seen bool algebra used this way before in Python.  i think part of what makes something readable is common patterns, not a drive for one-lining things.  in fact, the Google Python style guide recommends against comprehensions/generators unless they\u0027re \"simple\", and usually \"simple\" is defined as \"fits on one, maybe two, lines\".  that seems like a pretty analogous situation to this.\nhttps://github.com/google/styleguide/blob/gh-pages/pyguide.md#27-comprehensions--generator-expressions\n\nalso, i\u0027ll note the example you quote in the repo codebase is something you recently wrote, so i don\u0027t think that really serves as \"prior art\" ;).  normally multiplication on lists is using an integer to create an initial vector of an arbitrary length.  which is not a far leap from what you wrote in the conftest code as the boolean is implicitly converted to a 0/1.\n\ni don\u0027t know that this code is a hotpath to warrant making it less readable, although i also don\u0027t know what the microbenchmarks say for either form here.\n\ni might be amenable to changing duration_str by leaving a short comment on the uncommon bool logic style, but i don\u0027t think elapsed_str is salvageable.",
      "parentUuid": "3e456052_38704f92",
      "revId": "678d0ed2e3471b861919ac63bd7a7c31020865a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4dbd031b_0748f89f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1167921
      },
      "writtenOn": "2023-11-01T16:15:22Z",
      "side": 1,
      "message": "To be sure, I\u0027m not optimizing for performance. I\u0027m optimizing for reduced complexity (per the description), replacing loads of state with a simple expression. I believe this functional approach, while a little magical, is more direct and ultimately more readable (as readers become familiar with the concept). I\u0027m less concerned about it being one line than being one _expression_ and avoiding mutable state.\n\nI\u0027d be almost as happy with something like:\n\n```python\nhours_str \u003d f\u0027{hours}h\u0027*bool(hours)\nminutes_str \u003d f\u0027{minutes}m\u0027*bool(mins)\nseconds_str \u003d f\u0027{seconds}s\u0027\nreturn hours_str + minutes_str + seconds_str\n```\n\nI just think these expressions are small enough to warrant collapsing into a single expression.\n\n\u003e i might be amenable to changing duration_str by leaving a short comment on the uncommon bool logic style, but i don\u0027t think elapsed_str is salvageable.\n\nSince you\u0027re reluctant, I was intending to just abandon it, but since you\u0027re warming up to the idea, let me try something I think you\u0027ll like better. This latest patchset still constructs the string in lexical order, avoids boolean algebra in favor of a ternary expression, and still avoids branching and mutated variables.\n\nLet me know what you think.",
      "parentUuid": "ec4db8ab_22c1e51e",
      "revId": "678d0ed2e3471b861919ac63bd7a7c31020865a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f87f9cf1_0a63e888",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 15
      },
      "lineNbr": 0,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2023-11-09T09:42:36Z",
      "side": 1,
      "message": "i know perf isn\u0027t the goal.  i\u0027m saying that\u0027s one of the few cases where we might accept uncommon or hard to read code. \n\nGoogle has styleguides.  the point of styleguides isn\u0027t to minimize LoC or number of bytes, it\u0027s to focus on long term maintainability.  using uncommon constructs like you\u0027ve done here goes against that.  the tott article you quoted even supports my point: uncommon constructs increases cognitive load in order to process \u0026 understand them.  just because it\u0027s fewer LoC doesn\u0027t mean it\u0027s simpler or that it\u0027s easier to read \u0026 comprehend.\n\n\u003e as readers become familiar with the concept\n\nthis would require the concept be applicable enough to show up in widespread practice.  while i won\u0027t claim to have read the full-breadth of Python code in the world, having worked on it for over a decade now at Google, this is the first time i\u0027ve seen this construct.  and i\u0027m having a hard time thinking back and finding opportunities to use it more often.  especially when i compare it to learning other Pythonic styles that i actively see \u0026 migrate \u0026 remember \u0026 show others in code reviews.\n\ni\u0027m fine with the revised `elapsed_str` form",
      "parentUuid": "4dbd031b_0748f89f",
      "revId": "678d0ed2e3471b861919ac63bd7a7c31020865a0",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}