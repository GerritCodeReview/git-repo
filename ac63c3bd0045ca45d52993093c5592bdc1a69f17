{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "cbacaa10_f6642fe5",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 7,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "Can you add a more descriptive commit message and potentially details more lines below to summarize each file. I think it would be easier and faster if reviewers started out with high level info.",
      "range": {
        "startLine": 7,
        "startChar": 0,
        "endLine": 7,
        "endChar": 20
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "954cb3cc_96314ae1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 26
      },
      "lineNbr": 8,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "Please include a bug",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "40c1fe21_e246b950",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "halfway through the review, will look finish project.py and sync.py in a bit.\nIn the future, could big changes be split up into smaller ones",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f4ac8262_2b897ba4",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 26
      },
      "lineNbr": 0,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:20:24Z",
      "side": 1,
      "message": "doing sync.py next",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8e59643a_faae0aba",
        "filename": "error.py",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:20:24Z",
      "side": 1,
      "message": "does `outside of main.py` imply something useful i\u0027m missing?\ndo you mean `inside`? thrown inside repo but not handled until the process goes back to main.py right?",
      "range": {
        "startLine": 25,
        "startChar": 57,
        "endLine": 25,
        "endChar": 64
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7c0699af_46cf2696",
        "filename": "error.py",
        "patchSetId": 26
      },
      "lineNbr": 25,
      "author": {
        "id": 1159376
      },
      "writtenOn": "2023-07-25T23:42:31Z",
      "side": 1,
      "message": "Wording is confusing. RepoExitError generally shouldn\u0027t be caught/handled. Not the case with RepoError",
      "parentUuid": "8e59643a_faae0aba",
      "range": {
        "startLine": 25,
        "startChar": 57,
        "endLine": 25,
        "endChar": 64
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "730009eb_af728e6a",
        "filename": "error.py",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-07-25T01:41:01Z",
      "side": 1,
      "message": "Which exit codes can this error have? I\u0027m not sure if each `RepoExitError` has an unique exit code or errors like these can have any exit code. If it is any, how is the code decided?",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0c84d3ac_ac981558",
        "filename": "error.py",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1159376
      },
      "writtenOn": "2023-07-25T22:42:05Z",
      "side": 1,
      "message": "I\u0027m wondering how important it is to try and make a unique exit code per Exit condition (starting to have a change of heart). I\u0027m thinking that we can create error categories (with specific exit codes) but don\u0027t need to be 1-to-1 with exit errors ...\n\nTrying to maintain a error --\u003e code map seems to violate DRY \n\nWDYT ?",
      "parentUuid": "730009eb_af728e6a",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "eaeeb973_bf0cbecc",
        "filename": "error.py",
        "patchSetId": 26
      },
      "lineNbr": 73,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-07-25T23:12:50Z",
      "side": 1,
      "message": "\u003e I\u0027m thinking that we can create error categories\n\nI agree that this is a lot better than creating a one-to-one mapping. My question was more of \"Can NoManifestException have have different error codes for different scenario?\". If the answer is no and if it is that this error is going into a category and would share the exit code with its sibling errors, passing the error code here violates DRY since every flow that throws this error has to pass the same exit code to instantiate this exception.",
      "parentUuid": "0c84d3ac_ac981558",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "43a97d96_7571ac72",
        "filename": "git_command.py",
        "patchSetId": 26
      },
      "lineNbr": 378,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:20:24Z",
      "side": 1,
      "message": "what\u0027s the reason for keeping this in a separate function that we\u0027d have to call every time instead of incorporating into `__init__` where the command actually gets run? If there\u0027s a good technical reason for this, we should document it in the code.",
      "range": {
        "startLine": 378,
        "startChar": 8,
        "endLine": 378,
        "endChar": 23
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d6283e13_4d1921b9",
        "filename": "git_command.py",
        "patchSetId": 26
      },
      "lineNbr": 379,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "nit: missing \".\"",
      "range": {
        "startLine": 379,
        "startChar": 56,
        "endLine": 379,
        "endChar": 58
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e88d4610_c3ee7851",
        "filename": "git_command.py",
        "patchSetId": 26
      },
      "lineNbr": 382,
      "author": {
        "id": 1148045
      },
      "writtenOn": "2023-07-25T01:41:01Z",
      "side": 1,
      "message": "Is there reason for trimming the stdout at 100 lines? How long could these logs get?",
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "da343088_183c7c26",
        "filename": "main.py",
        "patchSetId": 26
      },
      "lineNbr": 879,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "```suggestion\n        result \u003d e.exit_code\n        if aggregate_errors:\n          print(f\"{exception_name} Aggregate Errors\")\n          for i in range(MAX_PRINT_ERRORS):\n            print(aggregate_errors[i])\n          if len(aggregate_errors) \u003e MAX_PRINT_ERRORS:\n            diff \u003d len(aggregate_errors) - MAX_PRINT_ERRORS\n            print(f\"+{diff} additional errors ...\")\n```\nalso can we replace 5 with MAX_PRINT_ERRORS so it\u0027s immediately obvious what the number represents?",
      "range": {
        "startLine": 869,
        "startChar": 8,
        "endLine": 879,
        "endChar": 51
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b6bced47_b2db6a23",
        "filename": "main.py",
        "patchSetId": 26
      },
      "lineNbr": 879,
      "author": {
        "id": 1159376
      },
      "writtenOn": "2023-07-25T23:29:33Z",
      "side": 1,
      "message": "Yea.",
      "parentUuid": "da343088_183c7c26",
      "range": {
        "startLine": 869,
        "startChar": 8,
        "endLine": 879,
        "endChar": 51
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b62bddb3_9567b446",
        "filename": "project.py",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T17:53:57Z",
      "side": 1,
      "message": "any reason this shouldn\u0027t go in errors.py, to be consistent and have one place for developers to look for existing Exceptions?",
      "range": {
        "startLine": 74,
        "startChar": 6,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "582e1ece_2f8a6899",
        "filename": "project.py",
        "patchSetId": 26
      },
      "lineNbr": 74,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:20:24Z",
      "side": 1,
      "message": "I half take this back. If this is strongly related to this file only, then maybe makes sense to keep here and i see other errors already living here. But I think we should be consistent. e.g. should GitCommandError live in git_command.py then?",
      "parentUuid": "b62bddb3_9567b446",
      "range": {
        "startLine": 74,
        "startChar": 6,
        "endLine": 74,
        "endChar": 26
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "793707bc_1eed673a",
        "filename": "project.py",
        "patchSetId": 26
      },
      "lineNbr": 2563,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:20:24Z",
      "side": 1,
      "message": "```suggestion\n        for try_n in range(retry_fetches)\n            gitcmd \u003d GitCommand(\n            ....\n            \n            try:\n                gitcmd.CheckForErrors()\n            except GitCommandError:\n                # Can\u0027t recover from errors on the last try\n                if try_n \u003d\u003d retry_fetches - 1:\n                    raise\n```",
      "range": {
        "startLine": 2541,
        "startChar": 0,
        "endLine": 2563,
        "endChar": 25
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "adafc686_8a02608b",
        "filename": "project.py",
        "patchSetId": 26
      },
      "lineNbr": 2563,
      "author": {
        "id": 1047143
      },
      "writtenOn": "2023-07-25T21:36:00Z",
      "side": 1,
      "message": "actually why not\n```suggestion\n        for try_n in range(retry_fetches)\n            gitcmd \u003d GitCommand(\n            ....\n\n            if try_n \u003d\u003d retry_fetches - 1:\n              gitcmd.CheckForErrors()\n```\n?",
      "parentUuid": "793707bc_1eed673a",
      "range": {
        "startLine": 2541,
        "startChar": 0,
        "endLine": 2563,
        "endChar": 25
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "850ad853_da392df0",
        "filename": "project.py",
        "patchSetId": 26
      },
      "lineNbr": 2563,
      "author": {
        "id": 1159376
      },
      "writtenOn": "2023-07-25T22:42:05Z",
      "side": 1,
      "message": "Yea, I like that",
      "parentUuid": "adafc686_8a02608b",
      "range": {
        "startLine": 2541,
        "startChar": 0,
        "endLine": 2563,
        "endChar": 25
      },
      "revId": "ac63c3bd0045ca45d52993093c5592bdc1a69f17",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}