{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "2fd42c7e_91f8019c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2021-02-17T02:16:14Z",
      "side": 1,
      "message": "The running-time difference shouldn\u0027t be a big deal, but wouldn\u0027t this increase memory usage by buffering the full diff?",
      "revId": "aea70e31e406b8637cb68e0f4d96dbffcb559935",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6352ad9d_1e48b94c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-02-17T02:45:28Z",
      "side": 1,
      "message": "it\u0027s buffered until it\u0027s displayed and then it\u0027s discarded.  i\u0027m not sure we\u0027ll ever have large enough diffs for this to really matter to anyone ?\n\nbuffering all the output is necessary to fix running in parallel and not having intermingled output.  i have CLs locally to fix that, but it\u0027s waiting on some other common --jobs reviews first.",
      "parentUuid": "2fd42c7e_91f8019c",
      "revId": "aea70e31e406b8637cb68e0f4d96dbffcb559935",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0084538c_7aa1ef9f",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1011842
      },
      "writtenOn": "2021-02-17T02:59:02Z",
      "side": 1,
      "message": "\u003e buffering all the output is necessary to fix running in parallel and not having intermingled output\n\nAh, that\u0027s the context I was missing. It\u0027s probably worth mentioning in the commit message that this will simplify future code for avoiding interleaved output.\n\nWhen Git itself runs into similar cases, it buffers all parallel jobs except for one that is \"in the foreground\"; that foreground job\u0027s output gets streamed as it runs to the console.",
      "parentUuid": "6352ad9d_1e48b94c",
      "revId": "aea70e31e406b8637cb68e0f4d96dbffcb559935",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "243ac1ad_a246b5ae",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 1
      },
      "lineNbr": 0,
      "author": {
        "id": 1007145
      },
      "writtenOn": "2021-02-18T03:54:26Z",
      "side": 1,
      "message": "\u003e It\u0027s probably worth mentioning in the commit message that this will simplify future code for avoiding interleaved output.\n\nthat\u0027s the reason i was looking around the code in general, but i also did it as a bit of cleanup \u0026 simplification: this allows me to delete a lot of this custom GitCommand logic with subprocess.run instead.\n\n\u003e When Git itself runs into similar cases, it buffers all parallel jobs except for one that is \"in the foreground\"; that foreground job\u0027s output gets streamed as it runs to the console.\n\nwe have a similar module in chromite, but maybe even slightly better: it buffers all jobs in the background, and the foreground thread will output the first job as it\u0027s running.  once that job finishes, it switches to the next one (finished or unfinished) and outputs it, then so on until all the jobs are done.  but that requires a not insignificant amount of code that has been a long time in the making (history goes back almost 10 years), and i\u0027m not ready to commit to that in repo when batching it is sufficient almost all the time.  especially as that is only been tested on Linux.",
      "parentUuid": "0084538c_7aa1ef9f",
      "revId": "aea70e31e406b8637cb68e0f4d96dbffcb559935",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}